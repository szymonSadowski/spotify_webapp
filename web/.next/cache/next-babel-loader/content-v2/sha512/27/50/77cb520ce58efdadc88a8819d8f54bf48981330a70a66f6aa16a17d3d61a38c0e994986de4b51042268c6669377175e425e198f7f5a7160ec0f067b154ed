{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/szymo/gitRepo/spotify_webapp/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/szymo/gitRepo/spotify_webapp/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport var useFetch = function useFetch(tokenCode) {\n  _s();\n\n  // console.log(tokenCode);\n  var _useState = useState({}),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  if (tokenCode.length > 1) {\n    useEffect(function () {\n      var fetchdata = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var response, dataResponse, myData, idData;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return fetch(\"http://localhost:8080/podcast?access_token=\".concat(tokenCode));\n\n                case 2:\n                  response = _context.sent;\n                  _context.next = 5;\n                  return response.json();\n\n                case 5:\n                  dataResponse = _context.sent;\n                  // const item = dataResponse.results[0];\n                  myData = Object.keys(dataResponse).map(function (key) {\n                    return dataResponse[key];\n                  }); // console.log(myData[0].show.id)\n\n                  idData = myData.map(function (data) {\n                    return data.show.id;\n                  });\n                  console.log(idData, 'idData');\n                  setData(idData);\n                  console.log(dataResponse);\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchdata() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      fetchdata();\n    }, [tokenCode]);\n    return {\n      data: data,\n      loading: loading\n    };\n  } else return 'Token not provided';\n};\n\n_s(useFetch, \"+2Aek85bYeV0JwBHRmtAxqiaVyE=\");","map":{"version":3,"sources":["C:/Users/szymo/gitRepo/spotify_webapp/web/src/utils/useFetch.ts"],"names":["useState","useEffect","useFetch","tokenCode","data","setData","loading","setLoading","length","fetchdata","fetch","response","json","dataResponse","myData","Object","keys","map","key","idData","show","id","console","log"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAuB;AAAA;;AAC3C;AAD2C,kBAEnBH,QAAQ,CAAC,EAAD,CAFW;AAAA,MAEpCI,IAFoC;AAAA,MAE9BC,OAF8B;;AAAA,mBAGbL,QAAQ,CAAC,IAAD,CAHK;AAAA,MAGpCM,OAHoC;AAAA,MAG3BC,UAH2B;;AAI3C,MAAGJ,SAAS,CAACK,MAAV,GAAmB,CAAtB,EAAyB;AACrBP,IAAAA,SAAS,CAAC,YAAM;AACZ,UAAMQ,SAAS;AAAA,4EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACOC,KAAK,sDACoBP,SADpB,EADZ;;AAAA;AACVQ,kBAAAA,QADU;AAAA;AAAA,yBAIWA,QAAQ,CAACC,IAAT,EAJX;;AAAA;AAIVC,kBAAAA,YAJU;AAKhB;AACMC,kBAAAA,MANU,GAMDC,MAAM,CAACC,IAAP,CAAYH,YAAZ,EAA0BI,GAA1B,CAA8B,UAAAC,GAAG,EAAI;AAClD,2BAAOL,YAAY,CAACK,GAAD,CAAnB;AACD,mBAFc,CANC,EAShB;;AACMC,kBAAAA,MAVU,GAUDL,MAAM,CAACG,GAAP,CAAW,UAAAb,IAAI,EAAI;AAChC,2BAAOA,IAAI,CAACgB,IAAL,CAAUC,EAAjB;AACD,mBAFc,CAVC;AAahBC,kBAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoB,QAApB;AACAd,kBAAAA,OAAO,CAACc,MAAD,CAAP;AACAG,kBAAAA,OAAO,CAACC,GAAR,CAAYV,YAAZ;;AAfgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAATJ,SAAS;AAAA;AAAA;AAAA,SAAf;;AAiBAA,MAAAA,SAAS;AACV,KAnBM,EAmBJ,CAACN,SAAD,CAnBI,CAAT;AAoBE,WAAO;AAAEC,MAAAA,IAAI,EAAJA,IAAF;AAAQE,MAAAA,OAAO,EAAPA;AAAR,KAAP;AACL,GAtBD,MAuBK,OAAO,oBAAP;AACN,CA5BI;;GAAMJ,Q","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (tokenCode: string) => {\r\n    // console.log(tokenCode);\r\n    const [data, setData] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    if(tokenCode.length > 1) {\r\n        useEffect(() => {\r\n            const fetchdata = async () => {\r\n              const response = await fetch(\r\n                `http://localhost:8080/podcast?access_token=${tokenCode}`\r\n              );\r\n              const dataResponse = await response.json();\r\n              // const item = dataResponse.results[0];\r\n              const myData = Object.keys(dataResponse).map(key => {\r\n                return dataResponse[key];\r\n              });\r\n              // console.log(myData[0].show.id)\r\n              const idData = myData.map(data => {\r\n                return data.show.id as string;\r\n              })\r\n              console.log(idData, 'idData')\r\n              setData(idData);\r\n              console.log(dataResponse);\r\n            };\r\n            fetchdata();\r\n          }, [tokenCode]);\r\n          return { data, loading };\r\n    }\r\n    else return 'Token not provided';\r\n  };"]},"metadata":{},"sourceType":"module"}